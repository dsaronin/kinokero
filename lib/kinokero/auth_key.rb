# #########################################################################
# #########################################################################
require 'openssl'
require 'base64'

# #########################################################################
# DRY place for all authorization keycode preparation
# #########################################################################

class AuthKey

# #########################################################################

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
  def self.secure_digest(*args)
    OpenSSL::Digest::SHA256.new( args.flatten.join('--') ).hexdigest
  end

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
  def self.make_token
    secure_digest(Time.now, (1..10).map{ rand.to_s })
  end
 
# ------------------------------------------------------------------------
# make_auth_key -- returns a SHA-encrypted randomized key from time & seed
# ------------------------------------------------------------------------
  def self.make_auth_key( seed='' )
    return secure_digest( (Time.now.to_s + seed.to_s ).split(//).sort_by {rand} )
  end
  

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
 
# #########################################################################
# #########################################################################
end   #  class AuthKey
